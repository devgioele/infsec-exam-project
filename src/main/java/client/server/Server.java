package client.server;

import com.google.gson.JsonSyntaxException;
import client.crypto.RsaKey;
import client.util.ClientLogger;
import client.util.ConciseHttpClient;
import client.util.UnauthorizedException;
import http.Email;
import http.Jwt;
import http.JwtPayload;
import http.RsaKey64;

import java.io.IOException;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

import static util.Convert.gson;
import static util.IO.jsonFromFile;
import static util.IO.jsonToFile;

public class Server {

	private static Server INSTANCE;

	private final ConciseHttpClient http;
	private final ServerConfig config;

	public static Server getInstance() {
		if (INSTANCE == null) {
			String pathConfig = Paths.get("client", "server.json").toAbsolutePath().toString();
			INSTANCE = new Server(pathConfig);
		}
		return INSTANCE;
	}

	public Server(String pathConfig) {
		ServerConfig config = jsonFromFile(pathConfig, ServerConfig.class);
		if (config == null) {
			ClientLogger.println("No server config found. Creating a template");
			config = new ServerConfig("http://localhost:8080/server");
			jsonToFile(config, pathConfig);
		}
		http = new ConciseHttpClient(config.location);
		this.config = config;
	}

	public Email[] loadSentEmails(String jwt) throws IOException, UnauthorizedException {
		String json = http.get("email/sent", jwt);
		return gson.fromJson(json, Email[].class);
	}

	public Email[] loadInbox(String jwt) throws IOException, UnauthorizedException {
		String json = http.get("email/inbox", jwt);
		return gson.fromJson(json, Email[].class);
	}

	public void sendEmail(String jwt, String receiver, String subject, String body)
			throws IOException, UnauthorizedException {
		Map<String, String> params = new HashMap<>();
		params.put("receiver", receiver);
		params.put("subject", subject);
		params.put("body", body);
		http.post("email/send", jwt, params);
	}

	/**
	 * Registers the given user.
	 *
	 * @return The JWT generated by the server.
	 */
	public String register(String name, String surname, String email, String password,
						   RsaKey publicKey) throws IOException, UnauthorizedException {
		Map<String, String> params = new HashMap<>();
		params.put("name", name);
		params.put("surname", surname);
		params.put("email", email);
		params.put("password", password);
		ClientLogger.println("Sending to server public key: " + publicKey);
		RsaKey64 publicKey64 = publicKey.to64();
		String json = http.post("register", params, gson.toJson(publicKey64));
		return gson.fromJson(json, Jwt.class).jwt;
	}

	public String login(String email, String password) throws IOException, UnauthorizedException {
		Map<String, String> params = new HashMap<>();
		params.put("email", email);
		params.put("password", password);
		String json = http.post("login", params);
		return gson.fromJson(json, Jwt.class).jwt;
	}

	/**
	 * @return The payload of the JWT or null if the JWT is invalid.
	 */
	public JwtPayload isJwtValid(String jwt) {
		try {
			String json = http.post("jwt/verify", jwt);
			return gson.fromJson(json, JwtPayload.class);
		} catch (UnauthorizedException ex) {
			return null;
		} catch (IOException ex) {
			ex.printStackTrace();
			return null;
		}
	}

	public Optional<RsaKey> getPublicKey(String jwt, String email)
			throws UnauthorizedException, IOException {
		Map<String, String> params = new HashMap<>();
		params.put("email", email);
		String json = http.get("public-key", jwt, params);
		try {
			RsaKey64 key64 = gson.fromJson(json, RsaKey64.class);
			if (key64 == null) {
				return Optional.empty();
			}
			RsaKey key = RsaKey.from64(key64);
			ClientLogger.println("Public key of '"+email+"' received from server: " + key);
			return Optional.of(key);
		} catch (JsonSyntaxException ignored) {
			return Optional.empty();
		}
	}

}
